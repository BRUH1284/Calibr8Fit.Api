// <auto-generated />
using System;
using Calibr8Fit.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Calibr8Fit.Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250923194323_PushTokens")]
    partial class PushTokens
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Calibr8Fit.Api.Models.Abstract.ActivityBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsUserActivity")
                        .HasColumnType("boolean")
                        .HasColumnName("is_user_activity");

                    b.Property<string>("MajorHeading")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("major_heading");

                    b.Property<float>("MetValue")
                        .HasColumnType("real")
                        .HasColumnName("met_value");

                    b.HasKey("Id")
                        .HasName("pk_base_activities");

                    b.ToTable("base_activities", (string)null);

                    b.HasDiscriminator<bool>("IsUserActivity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Calibr8Fit.Api.Models.Abstract.FoodBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<float>("Calcium")
                        .HasColumnType("real")
                        .HasColumnName("calcium");

                    b.Property<float>("CaloricValue")
                        .HasColumnType("real")
                        .HasColumnName("caloric_value");

                    b.Property<float>("Carbohydrates")
                        .HasColumnType("real")
                        .HasColumnName("carbohydrates");

                    b.Property<float>("Cholesterol")
                        .HasColumnType("real")
                        .HasColumnName("cholesterol");

                    b.Property<float>("Copper")
                        .HasColumnType("real")
                        .HasColumnName("copper");

                    b.Property<float>("DietaryFiber")
                        .HasColumnType("real")
                        .HasColumnName("dietary_fiber");

                    b.Property<float>("Fat")
                        .HasColumnType("real")
                        .HasColumnName("fat");

                    b.Property<float>("Iron")
                        .HasColumnType("real")
                        .HasColumnName("iron");

                    b.Property<bool>("IsUserFood")
                        .HasColumnType("boolean")
                        .HasColumnName("is_user_food");

                    b.Property<float>("Magnesium")
                        .HasColumnType("real")
                        .HasColumnName("magnesium");

                    b.Property<float>("Manganese")
                        .HasColumnType("real")
                        .HasColumnName("manganese");

                    b.Property<float>("MonounsaturatedFats")
                        .HasColumnType("real")
                        .HasColumnName("monounsaturated_fats");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<float>("NutritionDensity")
                        .HasColumnType("real")
                        .HasColumnName("nutrition_density");

                    b.Property<float>("Phosphorus")
                        .HasColumnType("real")
                        .HasColumnName("phosphorus");

                    b.Property<float>("PolyunsaturatedFats")
                        .HasColumnType("real")
                        .HasColumnName("polyunsaturated_fats");

                    b.Property<float>("Potassium")
                        .HasColumnType("real")
                        .HasColumnName("potassium");

                    b.Property<float>("Protein")
                        .HasColumnType("real")
                        .HasColumnName("protein");

                    b.Property<float>("SaturatedFats")
                        .HasColumnType("real")
                        .HasColumnName("saturated_fats");

                    b.Property<float>("Selenium")
                        .HasColumnType("real")
                        .HasColumnName("selenium");

                    b.Property<float>("Sodium")
                        .HasColumnType("real")
                        .HasColumnName("sodium");

                    b.Property<float>("Sugars")
                        .HasColumnType("real")
                        .HasColumnName("sugars");

                    b.Property<float>("VitaminA")
                        .HasColumnType("real")
                        .HasColumnName("vitamin_a");

                    b.Property<float>("VitaminB11FolicAcid")
                        .HasColumnType("real")
                        .HasColumnName("vitamin_b11folic_acid");

                    b.Property<float>("VitaminB12")
                        .HasColumnType("real")
                        .HasColumnName("vitamin_b12");

                    b.Property<float>("VitaminB1Thiamine")
                        .HasColumnType("real")
                        .HasColumnName("vitamin_b1thiamine");

                    b.Property<float>("VitaminB2Riboflavin")
                        .HasColumnType("real")
                        .HasColumnName("vitamin_b2riboflavin");

                    b.Property<float>("VitaminB3Niacin")
                        .HasColumnType("real")
                        .HasColumnName("vitamin_b3niacin");

                    b.Property<float>("VitaminB5PantothenicAcid")
                        .HasColumnType("real")
                        .HasColumnName("vitamin_b5pantothenic_acid");

                    b.Property<float>("VitaminB6")
                        .HasColumnType("real")
                        .HasColumnName("vitamin_b6");

                    b.Property<float>("VitaminC")
                        .HasColumnType("real")
                        .HasColumnName("vitamin_c");

                    b.Property<float>("VitaminD")
                        .HasColumnType("real")
                        .HasColumnName("vitamin_d");

                    b.Property<float>("VitaminE")
                        .HasColumnType("real")
                        .HasColumnName("vitamin_e");

                    b.Property<float>("VitaminK")
                        .HasColumnType("real")
                        .HasColumnName("vitamin_k");

                    b.Property<float>("Water")
                        .HasColumnType("real")
                        .HasColumnName("water");

                    b.Property<float>("Zinc")
                        .HasColumnType("real")
                        .HasColumnName("zinc");

                    b.HasKey("Id")
                        .HasName("pk_food_base");

                    b.ToTable("food_base", (string)null);

                    b.HasDiscriminator<bool>("IsUserFood");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Calibr8Fit.Api.Models.ActivityRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uuid")
                        .HasColumnName("activity_id");

                    b.Property<float>("CaloriesBurned")
                        .HasColumnType("real")
                        .HasColumnName("calories_burned");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<int>("Duration")
                        .HasColumnType("integer")
                        .HasColumnName("duration");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<DateTime>("SyncedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("synced_at");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_activity_records");

                    b.HasIndex("ActivityId")
                        .HasDatabaseName("ix_activity_records_activity_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_activity_records_user_id");

                    b.ToTable("activity_records", (string)null);
                });

            modelBuilder.Entity("Calibr8Fit.Api.Models.ConsumptionRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<Guid?>("FoodId")
                        .HasColumnType("uuid")
                        .HasColumnName("food_id");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<float>("Quantity")
                        .HasColumnType("real")
                        .HasColumnName("quantity");

                    b.Property<DateTime>("SyncedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("synced_at");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<Guid?>("UserMealId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_meal_id");

                    b.HasKey("Id")
                        .HasName("pk_consumption_records");

                    b.HasIndex("FoodId")
                        .HasDatabaseName("ix_consumption_records_food_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_consumption_records_user_id");

                    b.HasIndex("UserMealId")
                        .HasDatabaseName("ix_consumption_records_user_meal_id");

                    b.ToTable("consumption_records", null, t =>
                        {
                            t.HasCheckConstraint("ck_consumption_record_food_id_user_meal_id", "(food_id IS NOT NULL) != (user_meal_id IS NOT NULL)");
                        });
                });

            modelBuilder.Entity("Calibr8Fit.Api.Models.DailyBurnTarget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uuid")
                        .HasColumnName("activity_id");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<int>("Duration")
                        .HasColumnType("integer")
                        .HasColumnName("duration");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<DateTime>("SyncedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("synced_at");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_daily_burn_targets");

                    b.HasIndex("ActivityId")
                        .HasDatabaseName("ix_daily_burn_targets_activity_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_daily_burn_targets_user_id");

                    b.ToTable("daily_burn_targets", (string)null);
                });

            modelBuilder.Entity("Calibr8Fit.Api.Models.DataVersion", b =>
                {
                    b.Property<int>("DataResource")
                        .HasColumnType("integer")
                        .HasColumnName("data_resource");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_at");

                    b.HasKey("DataResource")
                        .HasName("pk_data_versions");

                    b.ToTable("data_versions", (string)null);
                });

            modelBuilder.Entity("Calibr8Fit.Api.Models.FriendRequest", b =>
                {
                    b.Property<string>("RequesterId")
                        .HasColumnType("text")
                        .HasColumnName("requester_id");

                    b.Property<string>("AddresseeId")
                        .HasColumnType("text")
                        .HasColumnName("addressee_id");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("requested_at");

                    b.HasKey("RequesterId", "AddresseeId")
                        .HasName("pk_friend_requests");

                    b.HasIndex("AddresseeId")
                        .HasDatabaseName("ix_friend_requests_addressee_id");

                    b.HasIndex("RequesterId")
                        .HasDatabaseName("ix_friend_requests_requester_id");

                    b.ToTable("friend_requests", (string)null);
                });

            modelBuilder.Entity("Calibr8Fit.Api.Models.Friendship", b =>
                {
                    b.Property<string>("UserAId")
                        .HasColumnType("text")
                        .HasColumnName("user_a_id");

                    b.Property<string>("UserBId")
                        .HasColumnType("text")
                        .HasColumnName("user_b_id");

                    b.Property<DateTime>("FriendsSince")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("friends_since");

                    b.HasKey("UserAId", "UserBId")
                        .HasName("pk_friendships");

                    b.HasIndex("UserAId")
                        .HasDatabaseName("ix_friendships_user_a_id");

                    b.HasIndex("UserBId")
                        .HasDatabaseName("ix_friendships_user_b_id");

                    b.ToTable("friendships", (string)null);
                });

            modelBuilder.Entity("Calibr8Fit.Api.Models.ProfilePicture", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("FileName")
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.HasKey("UserId", "FileName")
                        .HasName("pk_profile_pictures");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_profile_pictures_user_id");

                    b.ToTable("profile_pictures", (string)null);
                });

            modelBuilder.Entity("Calibr8Fit.Api.Models.PushToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("DeviceId")
                        .HasColumnType("text")
                        .HasColumnName("device_id");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.HasKey("UserId", "DeviceId")
                        .HasName("pk_push_tokens");

                    b.ToTable("push_tokens", (string)null);
                });

            modelBuilder.Entity("Calibr8Fit.Api.Models.RefreshToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("DeviceId")
                        .HasColumnType("text")
                        .HasColumnName("device_id");

                    b.Property<DateTime>("ExpiresOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_on");

                    b.Property<string>("TokenHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token_hash");

                    b.HasKey("UserId", "DeviceId")
                        .HasName("pk_refresh_tokens");

                    b.ToTable("refresh_tokens", (string)null);
                });

            modelBuilder.Entity("Calibr8Fit.Api.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Calibr8Fit.Api.Models.UserMeal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<DateTime>("SyncedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("synced_at");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_meals");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_meals_user_id");

                    b.ToTable("user_meals", (string)null);
                });

            modelBuilder.Entity("Calibr8Fit.Api.Models.UserMealItem", b =>
                {
                    b.Property<Guid>("UserMealId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_meal_id");

                    b.Property<Guid>("FoodId")
                        .HasColumnType("uuid")
                        .HasColumnName("food_id");

                    b.Property<float>("Quantity")
                        .HasColumnType("real")
                        .HasColumnName("quantity");

                    b.HasKey("UserMealId", "FoodId")
                        .HasName("pk_user_meal_items");

                    b.HasIndex("FoodId")
                        .HasDatabaseName("ix_user_meal_items_food_id");

                    b.ToTable("user_meal_items", (string)null);
                });

            modelBuilder.Entity("Calibr8Fit.Api.Models.UserProfile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("ActivityLevel")
                        .HasColumnType("integer")
                        .HasColumnName("activity_level");

                    b.Property<int>("Climate")
                        .HasColumnType("integer")
                        .HasColumnName("climate");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<int>("Gender")
                        .HasColumnType("integer")
                        .HasColumnName("gender");

                    b.Property<float>("Height")
                        .HasColumnType("real")
                        .HasColumnName("height");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("ProfilePictureFileName")
                        .HasColumnType("text")
                        .HasColumnName("profile_picture_file_name");

                    b.Property<float>("TargetWeight")
                        .HasColumnType("real")
                        .HasColumnName("target_weight");

                    b.Property<float>("Weight")
                        .HasColumnType("real")
                        .HasColumnName("weight");

                    b.HasKey("Id")
                        .HasName("pk_user_profiles");

                    b.ToTable("user_profiles", (string)null);
                });

            modelBuilder.Entity("Calibr8Fit.Api.Models.WaterIntakeRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AmountInMilliliters")
                        .HasColumnType("integer")
                        .HasColumnName("amount_in_milliliters");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<DateTime>("SyncedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("synced_at");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_water_intake_records");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_water_intake_records_user_id");

                    b.ToTable("water_intake_records", (string)null);
                });

            modelBuilder.Entity("Calibr8Fit.Api.Models.WeightRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<DateTime>("SyncedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("synced_at");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<float>("Weight")
                        .HasColumnType("real")
                        .HasColumnName("weight");

                    b.HasKey("Id")
                        .HasName("pk_weight_records");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_weight_records_user_id");

                    b.ToTable("weight_records", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "Admin",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "User",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Calibr8Fit.Api.Models.Activity", b =>
                {
                    b.HasBaseType("Calibr8Fit.Api.Models.Abstract.ActivityBase");

                    b.ToTable("base_activities", (string)null);

                    b.HasDiscriminator().HasValue(false);
                });

            modelBuilder.Entity("Calibr8Fit.Api.Models.UserActivity", b =>
                {
                    b.HasBaseType("Calibr8Fit.Api.Models.Abstract.ActivityBase");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<DateTime>("SyncedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("synced_at");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_base_activities_user_id");

                    b.HasIndex("UserId", "Id")
                        .HasDatabaseName("ix_base_activities_user_id_id");

                    b.ToTable("base_activities", (string)null);

                    b.HasDiscriminator().HasValue(true);
                });

            modelBuilder.Entity("Calibr8Fit.Api.Models.Food", b =>
                {
                    b.HasBaseType("Calibr8Fit.Api.Models.Abstract.FoodBase");

                    b.HasDiscriminator().HasValue(false);
                });

            modelBuilder.Entity("Calibr8Fit.Api.Models.UserFood", b =>
                {
                    b.HasBaseType("Calibr8Fit.Api.Models.Abstract.FoodBase");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<DateTime>("SyncedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("synced_at");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_food_base_user_id");

                    b.HasIndex("UserId", "Id")
                        .HasDatabaseName("ix_food_base_user_id_id");

                    b.ToTable("food_base", (string)null);

                    b.HasDiscriminator().HasValue(true);
                });

            modelBuilder.Entity("Calibr8Fit.Api.Models.ActivityRecord", b =>
                {
                    b.HasOne("Calibr8Fit.Api.Models.Abstract.ActivityBase", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_activity_records_base_activities_activity_id");

                    b.HasOne("Calibr8Fit.Api.Models.User", "User")
                        .WithMany("ActivityRecords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_activity_records_users_user_id");

                    b.Navigation("Activity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Calibr8Fit.Api.Models.ConsumptionRecord", b =>
                {
                    b.HasOne("Calibr8Fit.Api.Models.Abstract.FoodBase", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_consumption_records_food_base_food_id");

                    b.HasOne("Calibr8Fit.Api.Models.User", "User")
                        .WithMany("ConsumptionRecords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_consumption_records_users_user_id");

                    b.HasOne("Calibr8Fit.Api.Models.UserMeal", "UserMeal")
                        .WithMany()
                        .HasForeignKey("UserMealId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_consumption_records_user_meals_user_meal_id");

                    b.Navigation("Food");

                    b.Navigation("User");

                    b.Navigation("UserMeal");
                });

            modelBuilder.Entity("Calibr8Fit.Api.Models.DailyBurnTarget", b =>
                {
                    b.HasOne("Calibr8Fit.Api.Models.Abstract.ActivityBase", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_daily_burn_targets_base_activities_activity_id");

                    b.HasOne("Calibr8Fit.Api.Models.User", "User")
                        .WithMany("DailyBurnTargets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_daily_burn_targets_users_user_id");

                    b.Navigation("Activity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Calibr8Fit.Api.Models.FriendRequest", b =>
                {
                    b.HasOne("Calibr8Fit.Api.Models.User", "Addressee")
                        .WithMany("ReceivedFriendRequests")
                        .HasForeignKey("AddresseeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_friend_requests_asp_net_users_addressee_id");

                    b.HasOne("Calibr8Fit.Api.Models.User", "Requester")
                        .WithMany("SentFriendRequests")
                        .HasForeignKey("RequesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_friend_requests_asp_net_users_requester_id");

                    b.Navigation("Addressee");

                    b.Navigation("Requester");
                });

            modelBuilder.Entity("Calibr8Fit.Api.Models.Friendship", b =>
                {
                    b.HasOne("Calibr8Fit.Api.Models.User", "UserA")
                        .WithMany()
                        .HasForeignKey("UserAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_friendships_users_user_a_id");

                    b.HasOne("Calibr8Fit.Api.Models.User", "UserB")
                        .WithMany()
                        .HasForeignKey("UserBId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_friendships_users_user_b_id");

                    b.Navigation("UserA");

                    b.Navigation("UserB");
                });

            modelBuilder.Entity("Calibr8Fit.Api.Models.ProfilePicture", b =>
                {
                    b.HasOne("Calibr8Fit.Api.Models.UserProfile", null)
                        .WithMany("ProfilePictures")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_profile_pictures_user_profiles_user_id");
                });

            modelBuilder.Entity("Calibr8Fit.Api.Models.PushToken", b =>
                {
                    b.HasOne("Calibr8Fit.Api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_push_tokens_asp_net_users_user_id");
                });

            modelBuilder.Entity("Calibr8Fit.Api.Models.RefreshToken", b =>
                {
                    b.HasOne("Calibr8Fit.Api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_refresh_tokens_asp_net_users_user_id");
                });

            modelBuilder.Entity("Calibr8Fit.Api.Models.UserMeal", b =>
                {
                    b.HasOne("Calibr8Fit.Api.Models.User", "User")
                        .WithMany("UserMeals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_meals_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Calibr8Fit.Api.Models.UserMealItem", b =>
                {
                    b.HasOne("Calibr8Fit.Api.Models.Abstract.FoodBase", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_user_meal_items_food_base_food_id");

                    b.HasOne("Calibr8Fit.Api.Models.UserMeal", "UserMeal")
                        .WithMany("MealItems")
                        .HasForeignKey("UserMealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_meal_items_user_meals_user_meal_id");

                    b.Navigation("Food");

                    b.Navigation("UserMeal");
                });

            modelBuilder.Entity("Calibr8Fit.Api.Models.UserProfile", b =>
                {
                    b.HasOne("Calibr8Fit.Api.Models.User", null)
                        .WithOne("Profile")
                        .HasForeignKey("Calibr8Fit.Api.Models.UserProfile", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_profiles_asp_net_users_id");
                });

            modelBuilder.Entity("Calibr8Fit.Api.Models.WaterIntakeRecord", b =>
                {
                    b.HasOne("Calibr8Fit.Api.Models.User", "User")
                        .WithMany("WaterIntakeRecords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_water_intake_records_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Calibr8Fit.Api.Models.WeightRecord", b =>
                {
                    b.HasOne("Calibr8Fit.Api.Models.User", "User")
                        .WithMany("WeightRecords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_weight_records_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Calibr8Fit.Api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Calibr8Fit.Api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id");

                    b.HasOne("Calibr8Fit.Api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Calibr8Fit.Api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id");
                });

            modelBuilder.Entity("Calibr8Fit.Api.Models.UserActivity", b =>
                {
                    b.HasOne("Calibr8Fit.Api.Models.User", "User")
                        .WithMany("UserActivities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_base_activities_asp_net_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Calibr8Fit.Api.Models.UserFood", b =>
                {
                    b.HasOne("Calibr8Fit.Api.Models.User", "User")
                        .WithMany("UserFoods")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_food_base_asp_net_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Calibr8Fit.Api.Models.User", b =>
                {
                    b.Navigation("ActivityRecords");

                    b.Navigation("ConsumptionRecords");

                    b.Navigation("DailyBurnTargets");

                    b.Navigation("Profile");

                    b.Navigation("ReceivedFriendRequests");

                    b.Navigation("SentFriendRequests");

                    b.Navigation("UserActivities");

                    b.Navigation("UserFoods");

                    b.Navigation("UserMeals");

                    b.Navigation("WaterIntakeRecords");

                    b.Navigation("WeightRecords");
                });

            modelBuilder.Entity("Calibr8Fit.Api.Models.UserMeal", b =>
                {
                    b.Navigation("MealItems");
                });

            modelBuilder.Entity("Calibr8Fit.Api.Models.UserProfile", b =>
                {
                    b.Navigation("ProfilePictures");
                });
#pragma warning restore 612, 618
        }
    }
}
